<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Select_All" xml:space="preserve">
    <value>Выбрать все</value>
  </data>
  <data name="Riddle" xml:space="preserve">
    <value>Начальник тюрьмы предлагает 100 приговоренным к смертной казни, пронумерованным от 1 до 100, последний шанс. В комнате есть шкаф со 100 ящиками. В каждый закрытый ящик директор случайным образом кладет по одному номеру заключенного. Заключенные входят в комнату один за другим. Каждый заключенный может открыть и заглянуть в 50 ящиков в любом порядке. После этого ящики снова закрываются. Если во время этого обыска каждый заключенный находит свой номер в одном из ящиков, все заключенные помилованы. Если хотя бы один заключенный не находит своего номера, все заключенные умирают. Прежде чем первый заключенный войдет в комнату, заключенные могут обсудить стратегию, но не могут общаться, как только первый заключенный войдет, чтобы заглянуть в ящики. Какова лучшая стратегия заключенных?</value>
  </data>
  <data name="Answer" xml:space="preserve">
    <value>Решение</value>
  </data>
  <data name="AnswerText" xml:space="preserve">
    <value>Если каждый заключенный случайным образом выбирает 50 ящиков , вероятность того, что один заключенный найдет их число, составляет 50%.
Удивительно, но существует стратегия, обеспечивающая вероятность выживания более 30%. Ключ к успеху в том, что заключенным не нужно заранее решать, какие ящики открывать. Каждый заключенный может использовать информацию , полученную из содержимого каждого ящика, который он уже открыл, чтобы решить, какой из них открыть следующим. Еще одно важное наблюдение заключается в том, что таким образом успех одного заключенного не зависит от успеха других заключенных, потому что все они зависят от того, как распределяются числа.

Для описания стратегии не только заключенные, но и ящики пронумерованы от 1 до 100; например, ряд за рядом, начиная с верхнего левого ящика. Теперь стратегия следующая:

    1. Каждый заключенный сначала открывает ящик со своим номером.
    2. Если этот ящик содержит их номер, они выполнены и прошли успешно.
    3. В противном случае в ящике есть номер другого заключенного, и затем они открывают ящик с этим номером.
    4. Заключенный повторяет шаги 2 и 3 до тех пор, пока не найдет свой собственный номер или не потерпит неудачу, потому что номер не найден в первых пятидесяти открытых ящиках.
Начав со своего номера, заключенный гарантирует, что он находится в уникальном цикле перестановки (см. ниже) ящиков, содержащих его номер. Вопрос только в том, будет ли этот цикл длиннее пятидесяти ящиков.</value>
  </data>
  <data name="Go" xml:space="preserve">
    <value>Поехали</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>Загадка о заключенных</value>
  </data>
  <data name="ClearList" xml:space="preserve">
    <value>Очистить список</value>
  </data>
  <data name="MoveBack" xml:space="preserve">
    <value>Назад</value>
  </data>
  <data name="Games" xml:space="preserve">
    <value>Игры</value>
  </data>
  <data name="Prisoners" xml:space="preserve">
    <value>Заключенные</value>
  </data>
</root>